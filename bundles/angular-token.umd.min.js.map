{"version":3,"sources":["ng://angular-token/lib/angular-token.token.ts","ng://angular-token/lib/angular-token.service.ts","ng://angular-token/lib/angular-token.interceptor.ts","ng://angular-token/lib/angular-token.module.ts"],"names":["ANGULAR_TOKEN_OPTIONS","InjectionToken","AngularTokenService","http","config","platformId","activatedRoute","router","this","userType","BehaviorSubject","authData","userData","localStorage","global","window","isPlatformServer","open","location","href","origin","setItem","getItem","removeItem","defaultOptions","apiPath","apiBase","signInPath","signInRedirect","signInStoredUrlStorageKey","signOutPath","validateTokenPath","signOutFailedValidate","registerAccountPath","deleteAccountPath","registerAccountCallback","updatePasswordPath","changePasswordPath","resetPasswordPath","resetPasswordCallback","userTypes","loginField","oAuthBase","oAuthPaths","github","oAuthCallbackPath","oAuthWindowType","oAuthWindowOptions","mergedOptions","assign","options","console","warn","tryLoadAuthData","Object","defineProperty","prototype","value","name","undefined","userSignedIn","canActivate","route","state","url","navigate","registerAccount","registerData","additionalData","next","getUserTypeByName","password_confirmation","passwordConfirmation","login","confirm_success_url","post","getServerPath","deleteAccount","delete","signIn","signInData","_this","body","_a","password","observ","pipe","share","subscribe","res","data","signInOAuth","oAuthType","oAuthPath","getOAuthPath","callbackUrl","authUrl","getOAuthUrl","windowOptions","key","hasOwnProperty","popup","requestCredentialsViaPostMessage","Error","processOAuthCallback","getAuthDataFromParams","signOut","finalize","validateToken","get","error","status","updatePassword","updatePasswordData","args","passwordCurrent","current_password","resetPasswordToken","reset_password_token","put","resetPassword","resetPasswordData","redirect_url","redirectUrl","changePassword","changePasswordData","getUserPath","path","getApiPath","constructedPath","windowType","encodeURIComponent","getAuthDataFromStorage","getAuthHeadersFromResponse","headers","accessToken","client","expiry","tokenType","uid","setAuthData","getAuthDataFromPostMessage","checkAuthData","queryParams","getAuthDataFromParamsObj","authWindow","pollerObserv","interval","responseObserv","fromEvent","pluck","filter","oAuthWindowResponseFilter","bind","pollerSubscription","closed","unsubscribe","postMessage","message","find","Injectable","providedIn","HttpClient","Inject","decorators","type","PLATFORM_ID","ActivatedRoute","Optional","Router","AngularTokenInterceptor","tokenService","intercept","req","tokenOptions","match","access-token","token-type","clone","setHeaders","handle","tap","handleResponse","err","HttpResponse","HttpErrorResponse","AngularTokenModule","parentModule","forRoot","ngModule","providers","provide","HTTP_INTERCEPTORS","useClass","multi","angularTokenOptionsProvider","useValue","NgModule","SkipSelf"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const ANGULAR_TOKEN_OPTIONS = new InjectionToken('ANGULAR_TOKEN_OPTIONS');\n","import { Injectable, Optional, Inject, PLATFORM_ID } from '@angular/core';\nimport { ActivatedRoute, Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { HttpClient, HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { isPlatformServer } from '@angular/common';\n\nimport { Observable, fromEvent, interval, BehaviorSubject } from 'rxjs';\nimport { pluck, filter, share, finalize } from 'rxjs/operators';\n\nimport { ANGULAR_TOKEN_OPTIONS } from './angular-token.token';\n\nimport {\n  SignInData,\n  RegisterData,\n  UpdatePasswordData,\n  ResetPasswordData,\n  ChangePasswordData,\n\n  UserType,\n  UserData,\n  AuthData,\n  ApiResponse,\n\n  AngularTokenOptions\n} from './angular-token.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AngularTokenService implements CanActivate {\n\n  get currentUserType(): string {\n    if (this.userType.value != null) {\n      return this.userType.value.name;\n    } else {\n      return undefined;\n    }\n  }\n\n  get currentUserData(): UserData {\n    return this.userData.value;\n  }\n\n  get currentAuthData(): AuthData {\n    return this.authData.value;\n  }\n\n  get apiBase(): string {\n    console.warn('[angular-token] The attribute .apiBase will be removed in the next major release, please use' +\n    '.tokenOptions.apiBase instead');\n    return this.options.apiBase;\n  }\n\n  get tokenOptions(): AngularTokenOptions {\n    return this.options;\n  }\n\n  set tokenOptions(options: AngularTokenOptions) {\n    this.options = (<any>Object).assign(this.options, options);\n  }\n\n  private options: AngularTokenOptions;\n  public userType: BehaviorSubject<UserType> = new BehaviorSubject<UserType>(null);\n  public authData: BehaviorSubject<AuthData> = new BehaviorSubject<AuthData>(null);\n  public userData: BehaviorSubject<UserData> = new BehaviorSubject<UserData>(null);\n  private global: Window | any;\n\n  private localStorage: Storage | any = {};\n\n  constructor(\n    private http: HttpClient,\n    @Inject(ANGULAR_TOKEN_OPTIONS) config: any,\n    @Inject(PLATFORM_ID) private platformId: Object,\n    @Optional() private activatedRoute: ActivatedRoute,\n    @Optional() private router: Router\n  ) {\n    this.global = (typeof window !== 'undefined') ? window : {};\n\n    if (isPlatformServer(this.platformId)) {\n\n      // Bad pratice, needs fixing\n      this.global = {\n        open: (): void => null,\n        location: {\n          href: '/',\n          origin: '/'\n        }\n      };\n\n      // Bad pratice, needs fixing\n      this.localStorage.setItem = (): void => null;\n      this.localStorage.getItem = (): void => null;\n      this.localStorage.removeItem = (): void => null;\n    } else {\n      this.localStorage = localStorage;\n    }\n\n    const defaultOptions: AngularTokenOptions = {\n      apiPath:                    null,\n      apiBase:                    null,\n\n      signInPath:                 'auth/sign_in',\n      signInRedirect:             null,\n      signInStoredUrlStorageKey:  null,\n\n      signOutPath:                'auth/sign_out',\n      validateTokenPath:          'auth/validate_token',\n      signOutFailedValidate:      false,\n\n      registerAccountPath:        'auth',\n      deleteAccountPath:          'auth',\n      registerAccountCallback:    this.global.location.href,\n\n      updatePasswordPath:         'auth',\n      changePasswordPath:         'auth/password',\n\n      resetPasswordPath:          'auth/password',\n      resetPasswordCallback:      this.global.location.href,\n\n      userTypes:                  null,\n      loginField:                 'email',\n\n      oAuthBase:                  this.global.location.origin,\n      oAuthPaths: {\n        github:                   'auth/github'\n      },\n      oAuthCallbackPath:          'oauth_callback',\n      oAuthWindowType:            'newWindow',\n      oAuthWindowOptions:         null,\n    };\n\n    const mergedOptions = (<any>Object).assign(defaultOptions, config);\n    this.options = mergedOptions;\n\n    if (this.options.apiBase === null) {\n      console.warn(`[angular-token] You have not configured 'apiBase', which may result in security issues. ` +\n                   `Please refer to the documentation at https://github.com/neroniaky/angular-token/wiki`);\n    }\n\n    this.tryLoadAuthData();\n  }\n\n  userSignedIn(): boolean {\n    if (this.authData.value == null) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    if (this.userSignedIn()) {\n      return true;\n    } else {\n      // Store current location in storage (usefull for redirection after signing in)\n      if (this.options.signInStoredUrlStorageKey) {\n        this.localStorage.setItem(\n          this.options.signInStoredUrlStorageKey,\n          state.url\n        );\n      }\n\n      // Redirect user to sign in if signInRedirect is set\n      if (this.router && this.options.signInRedirect) {\n        this.router.navigate([this.options.signInRedirect]);\n      }\n\n      return false;\n    }\n  }\n\n\n  /**\n   *\n   * Actions\n   *\n   */\n\n  // Register request\n  registerAccount(registerData: RegisterData, additionalData?: any): Observable<ApiResponse> {\n\n    registerData = Object.assign({}, registerData);\n\n    if (registerData.userType == null) {\n      this.userType.next(null);\n    } else {\n      this.userType.next(this.getUserTypeByName(registerData.userType));\n      delete registerData.userType;\n    }\n\n    if (\n      registerData.password_confirmation == null &&\n      registerData.passwordConfirmation != null\n    ) {\n      registerData.password_confirmation = registerData.passwordConfirmation;\n      delete registerData.passwordConfirmation;\n    }\n\n    if (additionalData !== undefined) {\n      registerData.additionalData = additionalData;\n    }\n\n    const login = registerData.login;\n    delete registerData.login;\n    registerData[this.options.loginField] = login;\n\n    registerData.confirm_success_url = this.options.registerAccountCallback;\n\n    return this.http.post<ApiResponse>(\n      this.getServerPath() + this.options.registerAccountPath, registerData\n    );\n  }\n\n  // Delete Account\n  deleteAccount(): Observable<ApiResponse> {\n    return this.http.delete<ApiResponse>(this.getServerPath() + this.options.deleteAccountPath);\n  }\n\n  // Sign in request and set storage\n  signIn(signInData: SignInData, additionalData?: any): Observable<ApiResponse> {\n    this.userType.next((signInData.userType == null) ? null : this.getUserTypeByName(signInData.userType));\n\n    const body = {\n      [this.options.loginField]: signInData.login,\n      password: signInData.password\n    };\n\n    if (additionalData !== undefined) {\n      body.additionalData = additionalData;\n    }\n\n    const observ = this.http.post<ApiResponse>(\n      this.getServerPath() + this.options.signInPath, body\n    ).pipe(share());\n\n    observ.subscribe(res => this.userData.next(res.data));\n\n    return observ;\n  }\n\n  signInOAuth(oAuthType: string) {\n\n    const oAuthPath: string = this.getOAuthPath(oAuthType);\n    const callbackUrl = `${this.global.location.origin}/${this.options.oAuthCallbackPath}`;\n    const oAuthWindowType: string = this.options.oAuthWindowType;\n    const authUrl: string = this.getOAuthUrl(oAuthPath, callbackUrl, oAuthWindowType);\n\n    if (oAuthWindowType === 'newWindow') {\n      const oAuthWindowOptions = this.options.oAuthWindowOptions;\n      let windowOptions = '';\n\n      if (oAuthWindowOptions) {\n        for (const key in oAuthWindowOptions) {\n          if (oAuthWindowOptions.hasOwnProperty(key)) {\n              windowOptions += `,${key}=${oAuthWindowOptions[key]}`;\n          }\n        }\n      }\n\n      const popup = window.open(\n          authUrl,\n          '_blank',\n          `closebuttoncaption=Cancel${windowOptions}`\n      );\n      return this.requestCredentialsViaPostMessage(popup);\n    } else if (oAuthWindowType === 'sameWindow') {\n      this.global.location.href = authUrl;\n      return undefined;\n    } else {\n      throw new Error(`Unsupported oAuthWindowType \"${oAuthWindowType}\"`);\n    }\n  }\n\n  processOAuthCallback(): void {\n    this.getAuthDataFromParams();\n  }\n\n  // Sign out request and delete storage\n  signOut(): Observable<ApiResponse> {\n    return this.http.delete<ApiResponse>(this.getServerPath() + this.options.signOutPath)\n      // Only remove the localStorage and clear the data after the call\n      .pipe(\n        finalize(() => {\n            this.localStorage.removeItem('accessToken');\n            this.localStorage.removeItem('client');\n            this.localStorage.removeItem('expiry');\n            this.localStorage.removeItem('tokenType');\n            this.localStorage.removeItem('uid');\n\n            this.authData.next(null);\n            this.userType.next(null);\n            this.userData.next(null);\n          }\n        )\n      );\n  }\n\n  // Validate token request\n  validateToken(): Observable<ApiResponse> {\n    const observ = this.http.get<ApiResponse>(\n      this.getServerPath() + this.options.validateTokenPath\n    ).pipe(share());\n\n    observ.subscribe(\n      (res) => this.userData.next(res.data),\n      (error) => {\n        if (error.status === 401 && this.options.signOutFailedValidate) {\n          this.signOut();\n        }\n    });\n\n    return observ;\n  }\n\n  // Update password request\n  updatePassword(updatePasswordData: UpdatePasswordData): Observable<ApiResponse> {\n\n    if (updatePasswordData.userType != null) {\n      this.userType.next(this.getUserTypeByName(updatePasswordData.userType));\n    }\n\n    let args: any;\n\n    if (updatePasswordData.passwordCurrent == null) {\n      args = {\n        password:               updatePasswordData.password,\n        password_confirmation:  updatePasswordData.passwordConfirmation\n      };\n    } else {\n      args = {\n        current_password:       updatePasswordData.passwordCurrent,\n        password:               updatePasswordData.password,\n        password_confirmation:  updatePasswordData.passwordConfirmation\n      };\n    }\n\n    if (updatePasswordData.resetPasswordToken) {\n      args.reset_password_token = updatePasswordData.resetPasswordToken;\n    }\n\n    const body = args;\n    return this.http.put<ApiResponse>(this.getServerPath() + this.options.updatePasswordPath, body);\n  }\n\n  // Reset password request\n  resetPassword(resetPasswordData: ResetPasswordData): Observable<ApiResponse> {\n\n    this.userType.next(\n      (resetPasswordData.userType == null) ? null : this.getUserTypeByName(resetPasswordData.userType)\n    );\n\n    const body = {\n      [this.options.loginField]: resetPasswordData.login,\n      redirect_url: resetPasswordData.redirectUrl\n    };\n\n    return this.http.post<ApiResponse>(this.getServerPath() + this.options.resetPasswordPath, body);\n  }\n\n  // Change password request\n  changePassword(changePasswordData: ChangePasswordData): Observable<ApiResponse> {\n\n    const body = {\n      password: changePasswordData.password,\n      password_confirmation: changePasswordData.passwordConfirmation\n    };\n\n    // const headers: HttpHeaders = new HttpHeaders();\n    // headers.append('uid', this.currentAuthData.uid);\n    // headers.append('client', this.currentAuthData.client);\n    // headers.append('access-token', this.currentAuthData.accessToken);\n\n    return this.http.put<ApiResponse>(this.getServerPath() + this.options.changePasswordPath, body);\n  }\n\n\n  /**\n   *\n   * Construct Paths / Urls\n   *\n   */\n\n   private getUserPath(): string {\n     return (this.userType.value == null) ? '' : this.userType.value.path + '/';\n   }\n\n   private getApiPath(): string {\n     let constructedPath = '';\n\n     if (this.options.apiBase != null) {\n       constructedPath += this.options.apiBase + '/';\n     }\n\n     if (this.options.apiPath != null) {\n       constructedPath += this.options.apiPath + '/';\n     }\n\n     return constructedPath;\n   }\n\n   private getServerPath(): string {\n     return this.getApiPath() + this.getUserPath();\n   }\n\n   private getOAuthPath(oAuthType: string): string {\n     let oAuthPath: string;\n\n     oAuthPath = this.options.oAuthPaths[oAuthType];\n\n     if (oAuthPath == null) {\n       oAuthPath = `/auth/${oAuthType}`;\n     }\n\n     return oAuthPath;\n   }\n\n   private getOAuthUrl(oAuthPath: string, callbackUrl: string, windowType: string): string {\n     let url: string;\n\n     url =   `${this.options.oAuthBase}/${oAuthPath}`;\n     url +=  `?omniauth_window_type=${windowType}`;\n     url +=  `&auth_origin_url=${encodeURIComponent(callbackUrl)}`;\n\n     if (this.userType.value != null) {\n       url += `&resource_class=${this.userType.value.name}`;\n     }\n\n     return url;\n   }\n\n\n  /**\n   *\n   * Get Auth Data\n   *\n   */\n\n   // Try to load auth data\n   private tryLoadAuthData(): void {\n\n     const userType = this.getUserTypeByName(this.localStorage.getItem('userType'));\n\n     if (userType) {\n       this.userType.next(userType);\n     }\n\n     this.getAuthDataFromStorage();\n\n     if (this.activatedRoute) {\n       this.getAuthDataFromParams();\n     }\n\n     // if (this.authData) {\n       //     this.validateToken();\n       // }\n     }\n\n     // Parse Auth data from response\n     public getAuthHeadersFromResponse(data: HttpResponse<any> | HttpErrorResponse): void {\n       const headers = data.headers;\n\n       const authData: AuthData = {\n         accessToken:    headers.get('access-token'),\n         client:         headers.get('client'),\n         expiry:         headers.get('expiry'),\n         tokenType:      headers.get('token-type'),\n         uid:            headers.get('uid')\n       };\n\n       this.setAuthData(authData);\n     }\n\n     // Parse Auth data from post message\n     private getAuthDataFromPostMessage(data: any): void {\n       const authData: AuthData = {\n         accessToken:    data['auth_token'],\n         client:         data['client_id'],\n         expiry:         data['expiry'],\n         tokenType:      'Bearer',\n         uid:            data['uid']\n       };\n\n       this.setAuthData(authData);\n     }\n\n     // Try to get auth data from storage.\n     public getAuthDataFromStorage(): void {\n\n       const authData: AuthData = {\n         accessToken:    this.localStorage.getItem('accessToken'),\n         client:         this.localStorage.getItem('client'),\n         expiry:         this.localStorage.getItem('expiry'),\n         tokenType:      this.localStorage.getItem('tokenType'),\n         uid:            this.localStorage.getItem('uid')\n       };\n\n       if (this.checkAuthData(authData)) {\n         this.authData.next(authData);\n       }\n     }\n\n     // Try to get auth data from url parameters.\n     private getAuthDataFromParams(): void {\n       this.activatedRoute.queryParams.subscribe(queryParams => {\n         const authData: AuthData = {\n           accessToken:    queryParams['token'] || queryParams['auth_token'],\n           client:         queryParams['client_id'],\n           expiry:         queryParams['expiry'],\n           tokenType:      'Bearer',\n           uid:            queryParams['uid']\n         };\n\n         if (this.checkAuthData(authData)) {\n           this.authData.next(authData);\n         }\n       });\n     }\n\n     // Try to get auth data from params obj.\n     public getAuthDataFromParamsObj(queryParams: any): void {\n       const authData: AuthData = {\n         accessToken:    queryParams['token'] || queryParams['auth_token'],\n         client:         queryParams['client_id'],\n         expiry:         queryParams['expiry'],\n         tokenType:      'Bearer',\n         uid:            queryParams['uid']\n       };\n\n       if (this.checkAuthData(authData)) {\n         this.authData.next(authData);\n       }\n     }\n\n  /**\n   *\n   * Set Auth Data\n   *\n   */\n\n   // Write auth data to storage\n   private setAuthData(authData: AuthData): void {\n     if (this.checkAuthData(authData)) {\n\n       this.authData.next(authData);\n\n       this.localStorage.setItem('accessToken', authData.accessToken);\n       this.localStorage.setItem('client', authData.client);\n       this.localStorage.setItem('expiry', authData.expiry);\n       this.localStorage.setItem('tokenType', authData.tokenType);\n       this.localStorage.setItem('uid', authData.uid);\n\n       if (this.userType.value != null) {\n         this.localStorage.setItem('userType', this.userType.value.name);\n       }\n\n     }\n   }\n\n\n  /**\n   *\n   * Validate Auth Data\n   *\n   */\n\n   // Check if auth data complete and if response token is newer\n   private checkAuthData(authData: AuthData): boolean {\n\n     if (\n       authData.accessToken != null &&\n       authData.client != null &&\n       authData.expiry != null &&\n       authData.tokenType != null &&\n       authData.uid != null\n       ) {\n       if (this.authData.value != null) {\n         return authData.expiry >= this.authData.value.expiry;\n       }\n       return true;\n     }\n     return false;\n   }\n\n\n  /**\n   *\n   * OAuth\n   *\n   */\n\n   private requestCredentialsViaPostMessage(authWindow: any): Observable<any> {\n     const pollerObserv = interval(500);\n\n     const responseObserv = fromEvent(this.global, 'message').pipe(\n       pluck('data'),\n       filter(this.oAuthWindowResponseFilter)\n       );\n\n     responseObserv.subscribe(\n       this.getAuthDataFromPostMessage.bind(this)\n       );\n\n     const pollerSubscription = pollerObserv.subscribe(() => {\n       if (authWindow.closed) {\n         pollerSubscription.unsubscribe();\n       } else {\n         authWindow.postMessage('requestCredentials', '*');\n       }\n     });\n\n     return responseObserv;\n   }\n\n   private oAuthWindowResponseFilter(data: any): any {\n     if (data.message === 'deliverCredentials' || data.message === 'authFailure') {\n       return data;\n     }\n   }\n\n\n  /**\n   *\n   * Utilities\n   *\n   */\n\n   // Match user config by user config name\n   private getUserTypeByName(name: string): UserType {\n     if (name == null || this.options.userTypes == null) {\n       return null;\n     }\n\n     return this.options.userTypes.find(\n       userType => userType.name === name\n       );\n   }\n }\n","import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpRequest, HttpInterceptor, HttpHandler, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nimport { AngularTokenService } from './angular-token.service';\n\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class AngularTokenInterceptor implements HttpInterceptor {\n\n  constructor( private tokenService: AngularTokenService ) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    // Get auth data from local storage\n    this.tokenService.getAuthDataFromStorage();\n\n    // Add the headers if the request is going to the configured server\n    const authData = this.tokenService.authData.value;\n\n    if (authData &&\n      (this.tokenService.tokenOptions.apiBase === null || req.url.match(this.tokenService.tokenOptions.apiBase))) {\n\n      const headers = {\n        'access-token': authData.accessToken,\n        'client':       authData.client,\n        'expiry':       authData.expiry,\n        'token-type':   authData.tokenType,\n        'uid':          authData.uid\n      };\n\n      req = req.clone({\n        setHeaders: headers\n      });\n    }\n\n    return next.handle(req).pipe(tap(\n        res => this.handleResponse(res),\n        err => this.handleResponse(err)\n    ));\n  }\n\n\n  // Parse Auth data from response\n  private handleResponse(res: HttpResponse<any> | HttpErrorResponse | HttpEvent<any>): void {\n    if (res instanceof HttpResponse || res instanceof HttpErrorResponse) {\n      if (this.tokenService.tokenOptions.apiBase === null || (res.url && res.url.match(this.tokenService.tokenOptions.apiBase))) {\n        this.tokenService.getAuthHeadersFromResponse(res);\n      }\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders, Optional, SkipSelf } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { AngularTokenOptions } from './angular-token.model';\nimport { AngularTokenService } from './angular-token.service';\nimport { AngularTokenInterceptor } from './angular-token.interceptor';\nimport { ANGULAR_TOKEN_OPTIONS } from './angular-token.token';\n\nexport * from './angular-token.service';\n\n@NgModule()\nexport class AngularTokenModule {\n\n  constructor(@Optional() @SkipSelf() parentModule: AngularTokenModule) {\n    if (parentModule) {\n      throw new Error('AngularToken is already loaded. It should only be imported in your application\\'s main module.');\n    }\n  }\n  static forRoot(options: AngularTokenOptions): ModuleWithProviders {\n    return {\n      ngModule: AngularTokenModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: AngularTokenInterceptor,\n          multi: true\n        },\n        options.angularTokenOptionsProvider ||\n        {\n          provide: ANGULAR_TOKEN_OPTIONS,\n          useValue: options\n        },\n        AngularTokenService\n      ]\n    };\n  }\n}\n"]}